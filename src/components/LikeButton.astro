---
export interface Props {
    postId: number;
    likeCount: number;
    isLiked: boolean;
}

const { postId, likeCount, isLiked } = Astro.props;
---

<script>
    import { LikeButtonModel } from "~/lib/client/models/like-button-model";
    import { ReactiveElement } from "~/lib/client/elements/reactive-element";

    class LikeButtonElement extends ReactiveElement {
        protected static override readonly tagName = "ui-like-button";

        private readonly model = new LikeButtonModel(this.dataset, {
            signal: this.disconnect.signal,
        });

        private readonly countLabel = this.querySelector("span")!;
        private readonly button = this.querySelector("button")!;

        public connectedCallback() {
            this.renderEffect(() => {
                this.countLabel.textContent = this.model.likeCount;
                this.button.disabled = !this.model.buttonEnabled;
                this.button.textContent = this.model.buttonSymbol;
            });

            this.hydrateListener(this.button, "click", this.model.clickButton);
        }
    }

    LikeButtonElement.register();
</script>

<ui-like-button data-is-liked={isLiked} data-post-id={postId} data-like-count={likeCount}>
    <span>{likeCount}</span>
    <button>
        {isLiked ? "♥︎" : "♡"}
    </button>
</ui-like-button>

<style>
    ui-like-button {
        display: flex;
        flex-direction: row;
        justify-content: start;
        align-items: center;
        gap: var(--spacing-2);
    }

    span {
        font-size: var(--font-size-sm);
        line-height: var(--font-size-sm--line-height);
    }

    button {
        color: var(--color-red-500);
    }

    button:disabled {
        opacity: 50%;
    }
</style>
